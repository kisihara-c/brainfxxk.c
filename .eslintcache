[{"c:\\develop\\brainfxxk.c\\src\\index.js":"1","c:\\develop\\brainfxxk.c\\src\\reportWebVitals.js":"2","c:\\develop\\brainfxxk.c\\src\\App.js":"3"},{"size":521,"mtime":1612678474625,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":3495,"mtime":1612696528894,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1ysm8cd",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"c:\\develop\\brainfxxk.c\\src\\index.js",[],["16","17"],"c:\\develop\\brainfxxk.c\\src\\reportWebVitals.js",[],"c:\\develop\\brainfxxk.c\\src\\App.js",["18","19"],"import './App.css';\nimport React, { Component } from 'react';\nlet count = 4;\n\nfunction App() {\n  return (\n    <BrainFxxkBox />\n  );\n}\n\n\nclass BrainFxxkBox extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      brfk: \"\",\n      newCode: \"\",\n      lt: \"<\",\n      gt: \">\",\n      plus: \"+\",\n      minus: \"-\",\n      dot: \".\",\n      conma: \",\",\n      leftPrts: \"[\",\n      rightPrts: \"]\"\n    };\n  }\n\n  handleChange = (event) => {\n    if(event.target.name===\"brfk\"){\n      this.setState({newCode:this.codeConvert(event.target.value)});\n      this.setState({[event.target.name]: event.target.value});\n    }\n    if(event.target.name===\"newCode\"){\n      this.setState({brfk:this.codeConvertReverse(event.target.value)});\n      this.setState({[event.target.name]: event.target.value});\n    }\n    else{\n      this.setState({newCode:this.codeConvert(this.state.brfk)});\n      this.setState({[event.target.name]: event.target.value});\n    }\n  }\n\n  codeConvert = (s) =>{\n    s = s.replaceAll(\"<\",this.state.lt);\n    s = s.replaceAll(\">\",this.state.gt);\n    s = s.replaceAll(\"+\",this.state.plus);\n    s = s.replaceAll(\"-\",this.state.minus);\n    s = s.replaceAll(\".\",this.state.dot);\n    s = s.replaceAll(\",\",this.state.conma);\n    s = s.replaceAll(\"[\",this.state.leftPrts);\n    s = s.replaceAll(\"]\",this.state.rightPrts);\n    return s;\n  }\n\n  codeConvertReverse = (s) =>{\n    s = s.replaceAll(this.state.lt,\"<\");\n    s = s.replaceAll(this.state.gt,\">\");\n    s = s.replaceAll(this.state.plus,\"+\");\n    s = s.replaceAll(this.state.minus,\"-\");\n    s = s.replaceAll(this.state.dot,\".\");\n    s = s.replaceAll(this.state.conma,\",\");\n    s = s.replaceAll(this.state.leftPrts,\"[\");\n    s = s.replaceAll(this.state.rightPrts,\"]\");\n    return s;\n  }\n\n  render() {\n    return (\n\n      <form>\n\n        <label>\n          brfk:\n            <input type=\"text\" name=\"brfk\" value={this.state.brfk} onChange={this.handleChange} />\n        </label>\n        \n        <input type=\"button\" value=\"fxxk(sync)\" onClick={this.handleChange}/>\n        <br />\n\n        <label>\n          new:\n            <textarea type=\"text\" name=\"newCode\" value={this.state.newCode} onChange={this.handleChange} />\n        </label>\n\n        <br />\n\n        <label>\n          &lt; :\n          <input type=\"text\" name=\"lt\" value={this.state.lt} onChange={this.handleChange} />\n        </label>\n        <label>\n          &gt; :\n          <input type=\"text\" name=\"gt\" value={this.state.gt} onChange={this.handleChange} />\n        </label>\n        <br />\n        <label>\n          + :\n          <input type=\"text\" name=\"plus\" value={this.state.plus} onChange={this.handleChange} />\n        </label>\n        <label>\n          - :\n          <input type=\"text\" name=\"minus\" value={this.state.minus} onChange={this.handleChange} />\n        </label>\n        <br />\n        <label>\n          . :\n          <input type=\"text\" name=\"dot\" value={this.state.dot} onChange={this.handleChange} />\n        </label>\n        <label>\n          , :\n          <input type=\"text\" name=\"conma\" value={this.state.conma} onChange={this.handleChange} />\n        </label>\n        <br />\n        <label>\n          [ :\n          <input type=\"text\" name=\"leftPrts\" value={this.state.leftPrts} onChange={this.handleChange} />\n        </label>\n        <label>\n          ] :\n          <input type=\"text\" name=\"rightPrts\" value={this.state.rightPrts} onChange={this.handleChange} />\n        </label>\n\n      </form>\n      \n    );\n  }\n}\n\nexport default App;\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":2,"column":17,"nodeType":"26","messageId":"27","endLine":2,"endColumn":26},{"ruleId":"24","severity":1,"message":"28","line":3,"column":5,"nodeType":"26","messageId":"27","endLine":3,"endColumn":10},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'count' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]